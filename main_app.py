from tkinter import scrolledtext
from datetime import datetime
import json
import os
import tkinter as tk
from tkinter import ttk, messagebox
from interface import JournalEntryForm, DiaryView
from analyzer import EmotionAnalyzer
from data_models import LongTermAnalysis, JournalEntry
from collections import defaultdict

class MentalHealthApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–æ–Ω–∏—Ç–æ—Ä –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        self.root.geometry("1000x800")
        self.root.configure(bg='#e0f7fa')

        self.entries = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
        self.analyzer = EmotionAnalyzer()

        self._setup_styles()
        self._setup_ui()
        self._load_initial_data()
        self._setup_diary_tab()
        self._setup_summary_tab()

        self._setup_education_tab()

        self.status_var = tk.StringVar()
        self.status_label = ttk.Label(self.root, textvariable=self.status_var, foreground='green', font=('Arial', 10))
        self.status_label.pack(side='bottom', pady=5)

    def _setup_education_tab(self):
        self.tab_edu = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_edu, text="–û–±–æ –º–Ω–µ")

        left_frame = ttk.Frame(self.tab_edu)
        right_frame = ttk.Frame(self.tab_edu)
        left_frame.pack(side='left', fill='y', padx=10, pady=10)
        right_frame.pack(side='right', fill='both', expand=True, padx=10, pady=10)

        self.emo_listbox = tk.Listbox(left_frame, font=('Arial', 11))
        self.emo_listbox.pack(fill='y')

        self.edu_text = scrolledtext.ScrolledText(right_frame, wrap=tk.WORD, font=('Arial', 10))
        self.edu_text.pack(fill='both', expand=True)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            with open(r'D:/Software/Necessary/Dippploom/KOOOOD/MentalHealthApp/data/emotions_info.json', 'r', encoding='utf-8') as f:
                self.emotion_info = json.load(f)
                for emotion in self.emotion_info.keys():
                    self.emo_listbox.insert(tk.END, emotion.capitalize())
        except Exception as e:
            self.emotion_info = {}
            self.edu_text.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
        self.emo_listbox.bind('<<ListboxSelect>>', self._show_emo_info)

    def _show_emo_info(self, event):
        selected = self.emo_listbox.curselection()
        if not selected:
            return
        emotion = self.emo_listbox.get(selected[0]).lower()
        info = self.emotion_info.get(emotion, {})

        self.edu_text.config(state='normal')
        self.edu_text.delete(1.0, tk.END)

        self.edu_text.insert(tk.END, f"{emotion.capitalize()}\n\n", 'title')
        self.edu_text.insert(tk.END, f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{info.get('description', '')}\n\n")

        self.edu_text.insert(tk.END, "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n")
        for cause in info.get('causes', []):
            self.edu_text.insert(tk.END, f"- {cause}\n")

        self.edu_text.insert(tk.END, "\n–ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è:\n")
        for tip in info.get('how_to_deal', []):
            self.edu_text.insert(tk.END, f"- {tip}\n")

        self.edu_text.config(state='disabled')

    def _setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('.', background='#e0f7fa')
        style.configure('TNotebook', background='#b2ebf2', borderwidth=0)
        style.configure('TNotebook.Tab',
                        background='#80deea',
                        padding=[15, 5],
                        font=('Arial', 10))
        style.map('TNotebook.Tab',
                  background=[('selected', '#4db6ac')],
                  foreground=[('selected', 'white')])

    def _setup_ui(self):
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.tab_new_entry = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_new_entry, text="–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")

        self.entry_form = JournalEntryForm(
            self.tab_new_entry,
            self._process_journal_entry
        )
        self.entry_form.pack(fill='both', expand=True, padx=20, pady=20)

    def _load_initial_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            if os.path.exists(r'D:/Software/Necessary/Dippploom/KOOOOD/MentalHealthApp/data/journal_entries.json'):
                with open(r'D:/Software/Necessary/Dippploom/KOOOOD/MentalHealthApp/data/journal_entries.json', "r", encoding="utf-8") as f:
                    self.entries = json.load(f)

                # üëá –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ EmotionAnalyzer
                self.analyzer.entries = [
                    JournalEntry(**entry) for entry in self.entries if isinstance(entry, dict)
                ]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.entries = []

    def _setup_diary_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞"""
        self.tab_diary = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_diary, text="–î–Ω–µ–≤–Ω–∏–∫")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø–∏—Å–µ–π
        normalized_entries = []
        for entry in self.entries:
            if isinstance(entry, dict):
                normalized = {
                    'timestamp': entry.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M')),
                    'text': entry.get('text', ''),
                    'triggers': entry.get('triggers', []),
                    'physical_sensations': entry.get('physical_sensations', []),
                    'thoughts': entry.get('thoughts', []),
                    'emotion': entry.get('emotion', '')
                }
                normalized_entries.append(normalized)

        self.diary_view = DiaryView(self.tab_diary, normalized_entries)
        self.diary_view.pack(fill='both', expand=True)

    def _save_entries(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/journal_entries.json', 'w', encoding='utf-8') as f:
                json.dump(self.entries, f, ensure_ascii=False, indent=2)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏: {str(e)}")

    def _process_journal_entry(self, entry_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        try:
            analysis = self.analyzer.analyze_entry(entry_data)
            if analysis:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
                self.entry_form.show_analysis(analysis)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å
                new_entry = {
                    'timestamp': entry_data['timestamp'],
                    'text': entry_data['text'],
                    'triggers': entry_data['triggers'],
                    'physical_sensations': entry_data['physical_sensations'],
                    'thoughts': entry_data['thoughts'],
                    'emotion': analysis.manifested_emotion,
                    'intensity': getattr(analysis, 'intensity', 0),
                    'recommendation': analysis.recommendation
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                self.entries.insert(0, new_entry)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–∏–∫ (–±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏)
                self._save_entries()
                self._update_diary()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫")
                # –í _process_journal_entry –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                self.status_var.set("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫")
                self.root.after(3000, lambda: self.status_var.set(""))

                self.status_var.set("–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å–ª–µ–¥–∏—à—å –∑–∞ —Å–æ–±–æ–π üíö")
                self.root.after(3000, lambda: self.status_var.set(""))


        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}")

    def _update_diary(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if hasattr(self, 'diary_view') and self.diary_view.winfo_exists():
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –≤–∏–¥–∏–º–∞
                if self.notebook.tab(self.tab_diary, 'state') == 'normal':
                    self.diary_view.update_entries(self.entries)
            except Exception as e:
                print(f"–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")

    def _setup_summary_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –æ–±—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        self.tab_summary = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_summary, text="–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.summary_text = scrolledtext.ScrolledText(
            self.tab_summary,
            wrap=tk.WORD,
            width=80,
            height=25,
            font=('Arial', 10),
            bg='white'
        )
        self.summary_text.pack(fill='both', expand=True, padx=10, pady=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.summary_text.tag_configure('header', font=('Arial', 12, 'bold'))
        self.summary_text.tag_configure('important', foreground='#d32f2f')
        self.summary_text.tag_configure('recommendation', foreground='#00796b')

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self._update_summary()

    def _update_summary(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        if not hasattr(self, 'summary_text'):
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        report = self.analyzer.generate_long_term_report()
        if not report:
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        summary = f"""–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï –û –í–ê–®–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò:

    1. –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∞—è —ç–º–æ—Ü–∏—è: {report.most_common_emotion}
    2. –ß–∞—Å—Ç—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(report.trending_triggers)}
    3. –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: {report.physiological_pattern}
    4. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è: {report.cognitive_pattern}
    5. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {report.psychological_state}
    """

        # üëÅ –ß–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è (–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ) –º—ã—Å–ª–∏
        summary += "\n–û–°–û–ó–ù–ê–ù–ù–´–ï –ú–´–°–õ–ò (–Ω–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ):\n"
        if report.risky_thoughts:
            for thought in report.risky_thoughts:
                summary += f"- ¬´{thought}¬ª\n"
        else:
            summary += "–ù–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –º—ã—Å–ª–µ–π.\n"

        # ‚ö†Ô∏è –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Ä–∏—Å–∫–∞–º
        summary += "\n–§–ê–ö–¢–û–†–´ –†–ò–°–ö–ê:\n"
        if isinstance(report.risk_factors, dict):
            for risk, explanation in report.risk_factors.items():
                if risk.strip():
                    summary += f"- {risk.capitalize()}: {explanation}\n"
                else:
                    summary += f"- {explanation}\n"
        elif isinstance(report.risk_factors, list):
            for risk in report.risk_factors:
                summary += f"- {risk}\n"

        # üìà –î–∏–Ω–∞–º–∏–∫–∞ —ç–º–æ—Ü–∏–π
        summary += "\n–î–ò–ù–ê–ú–ò–ö–ê –≠–ú–û–¶–ò–ô –ü–û –î–ù–Ø–ú:\n"
        for date, emotions in report.emotion_trend.items():
            line = f"{date}: " + ", ".join(f"{emotion} ‚Äî {count}" for emotion, count in emotions.items())
            summary += line + "\n"

        # üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        summary += "\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        for rec in report.recommendation['long_term']:
            summary += f"- {rec}\n"

        summary += "\n–ö–û–ì–î–ê –û–ë–†–ê–¢–ò–¢–¨–°–Ø –ö –°–ü–ï–¶–ò–ê–õ–ò–°–¢–£:\n"
        summary += f"{report.recommendation['professional_help']['when_to_consider']}\n\n"

        summary += "–†–ï–°–£–†–°–´:\n"
        for resource in report.recommendation['professional_help']['resources']:
            summary += f"- {resource}\n"

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
        self.summary_text.config(state='normal')
        self.summary_text.delete(1.0, tk.END)
        self.summary_text.insert(tk.END, summary)
        self.summary_text.config(state='disabled')

    def _update_diary(self):
        if hasattr(self, 'diary_view'):
            self.diary_view.update_entries(self.entries)
        self._update_summary()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É


if __name__ == "__main__":
    root = tk.Tk()
    app = MentalHealthApp(root)
    root.mainloop()